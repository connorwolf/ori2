{"version":3,"file":"KrystalClient.js","sourceRoot":"","sources":["../app/KrystalClient.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAAsC;AACtC,qCAAqC;AACrC,mCAAmC;AACnC,2DAAwD;AAexD,MAAa,aAAa;IASzB,YAAY,MAA6B;QACxC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,MAAM,GAAG,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;QAEtC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC5B,IAAI,CAAC,aAAa,GAAG,IAAI,6BAAa,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;IACjD,CAAC;IAEY,KAAK;;YACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACxC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YACrB,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;YACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACnC,IAAI,CAAC,aAAa,CAAC,sBAAsB,EAAE,CAAC;QAC7C,CAAC;KAAA;IAEa,OAAO;;YACpB,MAAM,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;iBACnE,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;gBAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACzB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;IACa,WAAW;;YACxB,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;iBAC5C,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;gBAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACzB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;CACD;AA1CD,sCA0CC","sourcesContent":["import * as Discord from \"discord.js\";\nimport * as Mongoose from \"mongoose\";\nimport * as Winston from \"winston\";\nimport { PluginManager } from \"./plugins/PluginManager\";\n\nexport interface IKrystalClientOptions {\n\tdefaults: {\n\t\tprefix: string,\n\t};\n\tbot: {\n\t\ttoken: string,\n\t\tplugins: string[],\n\t};\n\tdb: {\n\t\turl: string,\n\t};\n}\n\nexport class KrystalClient {\n\tpublic logger: Winston.Logger;\n\tpublic client: Discord.Client;\n\tpublic cache: Discord.Collection<string, any>;\n\t// public eventHandlers: Discord.Collection<string, EventHandler>;\n\tpublic startedOn: number;\n\tpublic PluginManager: PluginManager;\n\tpublic config: IKrystalClientOptions;\n\n\tconstructor(config: IKrystalClientOptions) {\n\t\tthis.config = config;\n\t\tthis.logger = Winston.createLogger(require(\"./config/winston\"));\n\t\tthis.client = new Discord.Client();\n\t\tthis.cache = new Discord.Collection();\n\t\t// this.eventHandlers = new Discord.Collection();\n\t\tthis.startedOn = Date.now();\n\t\tthis.PluginManager = new PluginManager(this);\n\t\tthis.logger.debug(\"KrystalClient initialised.\");\n\t}\n\n\tpublic async start() {\n\t\tthis.logger.info(\"Krystal starting...\");\n\t\tawait this.setupDb();\n\t\tawait this.setupClient();\n\t\tthis.logger.info(\"Krystal ready.\");\n\t\tthis.PluginManager.startConfiguredPlugins();\n\t}\n\n\tprivate async setupDb() {\n\t\tawait Mongoose.connect(this.config.db.url, { useNewUrlParser: true })\n\t\t\t.catch((error) => {\n\t\t\t\tthis.logger.error(error);\n\t\t\t\tprocess.exit(1);\n\t\t\t});\n\t}\n\tprivate async setupClient() {\n\t\tawait this.client.login(this.config.bot.token)\n\t\t\t.catch((error) => {\n\t\t\t\tthis.logger.error(error);\n\t\t\t\tprocess.exit(1);\n\t\t\t});\n\t}\n}"]}